using System;
using System.Collections.Generic;
namespace Delegates_Continuation_Module_10
{
    class Program
    {

        public delegate string MyDelegatePointer(int a, int b);

        static void Main(string[] args)
        {
            MyFPSGame fpsgame = new MyFPSGame();

            fpsgame.GameActions();
        }
    }
}

public class MyFPSGame
{
    public Enduser PrimaryEnduser { get; set; }
    public MyUser PrimaryMyUser { get; set: }
    public Inventory PrimaryInventory { get; set; }
    public Movement PrimaryMovement { get; set; }

    private Action theCharacterAction;


    public void GameActions()
    {
        ConsoleKey key = ConsoleKey.Enter;

        while (key != ConsoleKey.E)
        {

            Console.WriteLine("F -> Fire");
            Console.WriteLine("R -> Reload");
            Console.WriteLine("C -> Change Gun");
            Console.WriteLine("L -> Peek Left");
            Console.WriteLine("Z -> Peek Right");
            Console.WriteLine("E -> Quit");

            Console.WriteLine("");
            Console.WriteLine("Select an Action");
            key = Console.ReadKey().Key;

            switch (key)
            {
                case ConsoleKey.F:
                    theCharacterAction = FireGun;
                    break;
                case ConsoleKey.R:
                    theCharacterAction = ReloadGun;
                    break;
                case ConsoleKey.C:
                    theCharacterAction = ChangeGun;
                    break;
                case ConsoleKey.L:
                    theCharacterAction = PeekLeft;
                    break;
                case ConsoleKey.Z:
                    theCharacterAction = PeekRight;
                    break;
            }

            HandleAction();
        }
    }

    public void FireGun()
    {
        Console.WriteLine("");
        Console.WriteLine("You have fired your Gun");
    }

    public void ReloadGun()
    {
        Console.WriteLine("");
        Console.WriteLine("You Reloaded you Gun");
    }

    public void ChangeGun()
    {
        Console.WriteLine("");
        Console.WriteLine("You have changed Gun");
    }

    public void PeekLeft()
    {
        Console.WriteLine("");
        Console.WriteLine("You are Peeking left");
    }

    public void PeekRight()
    {
        Console.WriteLine("");
        Console.WriteLine("You are Peeking Right");
    }

    public void HandleAction()
    {
        theCharacterAction();
    }

    public bool WillGunFire(Enduser enduser)
    {
        if (enduser.IsPVP)
            return true;

        if (enduser.ClanTag.ClanName !=
            PrimaryEnduser.ClanTag.ClanName)
            return true;

        return false;

    }

    public bool WillGundReload(MyUser myuser)
    {
        if (myuser.AmmoCount = 0)
            return true;

        
        return false;
    }

    public bool UserSwitchesGun(Inventory inventory)
    {
        if (inventory.FirstGun)
            return true
                if (inventory.Gun2 !=
                   PrimaryInventory.Gun2)
            return true;

        return false;

    }

    public bool UserMovement(Movement movement)
    {
        if (movement.UserMoves)
            return true
                if(movment.)
    }

    public class Movement
    {
        public string UserPeeksLeft { set; get; }
        public string UserPeeksRight { set; get; }
        puliic bool UserMoves { set; get; }
    }

    public class Inventory
    {
        public string Gun2 { get; set;}
        public bool FirstGun { get; set; }


    }

    public class MyUser
    {
        public int AmmoCount { get; set; }
        public bool IsEmpty { get; set; }
   
    }
  
    
}

public class Enduser
{
    public string EndusersTag { get; set; }
    public bool IsPVP { get; set; }
    public Clan ClanTag { get; set; }
}

public class Clan
{
    public string ClanName { get; set; }

}

//-----------TEST------------//

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace My_FPS_Test
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void WillGunFire_WillItFire_ReturnsTrue()
        {
            MyFPSGame fpsGame = new MyFPSGame();

            Enduser newEnduser = new Enduser();
            newEnduser.IsPVP = true;
            newEnduser.EndusersTag = "Enduser141";

            Clan newClan = new Clan();
            newClan.ClanName = "WGS";
            newEnduser.ClanTag = newClan;
            fpsGame.PrimaryEnduser = newEnduser;

            Enduser newOpponet = new Enduser();
            newOpponet.IsPVP = true;
            newOpponet.EndusersTag = "Other Player";

            Clan newOpponetClan = new Clan();
            newOpponetClan.ClanName = "BFG";
            newOpponet.ClanTag = newOpponetClan;
            bool hitRegister = fpsGame.WillGunFire(newOpponet);

            Assert.IsTrue(hitRegister);
        }

    }
    [TestMethod]
    public void WillGunReload_WillItRealod_ReturnTrue()
    {
        MyUser gunReload = new MyUser();
        gunReload.IsEmpty = true;
        gunReload.AmmoCount = 5;
        bool ammoCount = gunReload.WillGunReaload(gunReload);

        Assert.IsTrue(ammoCount);
    }
    [TestMethod]
    public void UserSwitceshGun_GunWasSwapped_ReturnTrue()
    {
        Inventory myInventory = new Inventory();
        myInventory.FirstGun = true;
        myInventory.Gun2 = "Switched to Pistol";
        bool gunInventory = myInventory.UserSwitchesGun(myInventory);

        Assert.IsTrue(gunInventory);


    }
    [TestMethod]
    public void UsersMovement_WillUserMove_ReturnTrue()
    {
        Movement myMovement = new Movement();
        myMovement.UserMoves = true;
        myMovement.UserPeeksRight = "Enduser Peeked Right!";
        myMovement.UserPeeksLeft = "Enduser Peeked Left!";
        bool userMovment = myMovement.UsersMovement(myMovement);


        Assert.IsTrue(userMovment);
    }

}

    


